# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0.5
missile_group = set([])
rock_group = set([])
exploded_group = set([])
started = False

'''
Grading Rubric
1 pt - The program spawns multiple rocks. #Done
1 pt - The program correctly determines whether the ship collides with a rock. #Done
1 pt - The program removes a rock when the ship collides with a rock. #Done
1 pt - The number of lives decreases by one when the ship collides with a rock. #Done
1 pt - The program spawns multiple missiles. #Done
1 pt - The program plays the firing sound when each missile is spawned. #Done
1 pt - The program removes a missile that does not collide with a rock after some fixed time period. #Done
1 pt - The program correctly determines whether a missile and a rock collide. #Done
1 pt - The program removes missiles and rocks that collide. #Done
1 pt - The score is updated appropriately after missile/rock collisions. #Done
1 pt - When the lives go to zero, the splash screen reappears and all rocks are removed. #Done
1 pt - When the splash screen is clicked, the lives are reset to 3, score is reset to zero and the background music restarts.
1 pt - The game spawns rocks only when the splash screen is not visible and a game is in progressed. #Done
'''

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.s2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        forward = [math.cos(self.angle), math.sin(self.angle)] #for friction

        
    def draw(self,canvas):
        if self.thrust:
            canvas.draw_image(self.image, [self.image_center[0] + self.image_size[0], self.image_center[1]] , self.image_size, self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
            
            
                                               
    def update(self):
        global c, forward
        c = 0.01 # for friction
        forward = [math.cos(self.angle), math.sin(self.angle)] #for friction; instead of angle_to_vector helper method; not really needed

        
        self.angle += self.angle_vel
        
        if self.thrust == True:            
            self.vel[0] += forward[0] * .1
            self.vel[1] += forward[1] * .1
        
        self.vel[0] *= 0.999
        self.vel[1] *= 0.999

        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        self.vel[0] *= (1-c)
        self.vel[1] *= (1-c)
        
        if self.thrust == True:
            ship_thrust_sound.play()
        else:
            ship_thrust_sound.rewind()
    
    def get_radius(self):
        return self.radius        
        
    def shoot(self):
        global missile_group
        forward = angle_to_vector(self.angle)
        missile_pos = [self.pos[0] + self.radius * forward[0], self.pos[1] + self.radius * forward[1]]
        missile_vel = [self.vel[0] + 5 * forward[0], self.vel[1] + 5 * forward[1]]
        a_missile = Sprite(missile_pos, missile_vel, self.angle, 0, missile_image, missile_info, missile_sound)
        missile_group.add(a_missile)
   
        


# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image        
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)

    def get_pos(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def update(self):  
        self.angle += self.angle_vel
        self.pos[0] = (self.pos[0] + self.vel[0])
        self.pos[1] = (self.pos[1] + self.vel[1]) 
        self.age += 1
        return self.age > self.lifespan
      
   
    def collide(self, other_object):
        if dist(self.pos, other_object.pos) < (other_object.get_radius() + self.radius):
            explosion_sound.rewind()
            explosion_sound.play()
            return True
        else:
            return False
         


def keydown(key):
    if key == simplegui.KEY_MAP['up']:
        my_ship.thrust = True
    if key == simplegui.KEY_MAP['right']:
        my_ship.angle_vel += 0.1
    if key == simplegui.KEY_MAP['left']:
        my_ship.angle_vel -= 0.1
    if key == simplegui.KEY_MAP['space']:
        my_ship.shoot()

    
        
def keyup(key):
    if key == simplegui.KEY_MAP['up']:
        my_ship.thrust = False
    if key == simplegui.KEY_MAP['right']:
        my_ship.angle_vel -= 0.1    
    if key == simplegui.KEY_MAP['left']:
        my_ship.angle_vel += 0.1    


def sprite_update(sprites, canvas):   
    for sprite in set(sprites): 
        sprite.draw(canvas)
        if sprite.update():
            sprites.remove(sprite)
    

def group_collide(group, other_object):
    global exploded_group, collide_count, started
    collide_count = 0
    for item in set(group):
        if item.collide(other_object):
            group.remove(item)
            collide_count += 1
    return collide_count
    if started == False:
        print "Im here"
    
    
def group_group_collide(group, other_group):
    total_collide = 0
    for item in set(group):
        collided = group_collide(other_group, item)
        if collided > 0:
            group.remove(item)
        total_collide += collided        
    return total_collide        

    
def draw(canvas):
    global time, score, lives, rock_group, missile_group, started, soundtrack
    soundtrack.play()
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    
    
    canvas.draw_text('Lives: ' + str(lives), [10, 40], 40, "Teal")
    canvas.draw_text('Score: ' + str(score), [650, 40], 40, "Teal")

    # draw ship and update ship
    my_ship.draw(canvas)
    my_ship.update()
    
    #collision 
    if group_collide(rock_group, my_ship):   
        lives -= 1
        #score += group_group_collide(missile_group, rock_group)        
        
    if group_group_collide(rock_group, missile_group) > 0:
        score += 1
        
    #if not started, then draw the splash screen
    if started == False:
        soundtrack.rewind()
        canvas.draw_image(splash_image, splash_info.get_center(), splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], splash_info.get_size())
                                                    
               
    #detects if new game is needed
    if lives < 1:
        lives = 3
        score = 0
        started = False
        missile_group = set([])
        rock_group = set([])
    
    #rocks
    for x in rock_group:
        x.draw(canvas)
        x.update()

    #missiles
    for y in missile_group:
        y.draw(canvas)
        y.update()



#finds out if splash screen is clicked or not clicked   
def splash_screen_click(pos):
    global started, lives, score, soundtrack
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    width_ = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    height_ = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if width_ and height_:
        started = True
        lives = 3
        score = 0       
         

# timer handler that spawns a rock    
def rock_spawner():    
    global rock_group, started    
    if started == False:
        return
    else:        
        a_position = (WIDTH / random.randint(1, 10), HEIGHT / random.randint(1, 10)) 
        a_velocity = (random.random(), -random.random())
        a_ang_vel = random.choice([0.1, -0.1])
        a_angle = random.randint(1, 10)
        a_rock = Sprite(a_position, a_velocity, a_angle, a_ang_vel, asteroid_image, asteroid_info)
        if len(rock_group) < 12:
            rock_group.add(a_rock)
        elif len(rock_group) > 12:
            return
        
        #makes sure that rocks spawn at least 10 pixles away from the ship
        while dist(a_position, my_ship.pos) < 10:
            a_position = (WIDTH / random.randint(1, 10), HEIGHT / random.randint(1, 10))
        
    

        
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
a_rock = Sprite([WIDTH / 3, HEIGHT / 3], [1, 1], 0, 0, asteroid_image, asteroid_info)
a_missile = Sprite([2 * WIDTH / 3, 2 * HEIGHT / 3], [-1,1], 0, 0, missile_image, missile_info, missile_sound)
rock_group = set([])
missile_group = set([])

# register handlers
frame.set_draw_handler(draw)
frame.set_keyup_handler(keyup)
frame.set_keydown_handler(keydown)
frame.set_mouseclick_handler(splash_screen_click)


timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()
